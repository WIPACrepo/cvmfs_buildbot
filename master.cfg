# -*- python -*-
# ex: set filetype=python:

import os
import json

from buildbot.plugins import *


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

worker_cfgs = {}
for name in os.listdir('../config'):
    w_name = name.replace('.json','')
    with open(os.path.join('../config',name)) as f:
        worker_cfgs[w_name] = json.load(f)

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []
for name in worker_cfgs:
    w = worker.LocalWorker(name, properties={'image':name})
    c['workers'].append(w)

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
#c['change_source'].append(changes.GitPoller(
#        'git://github.com/buildbot/pyflakes.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
#c['schedulers'].append(schedulers.SingleBranchScheduler(
#                            name="all",
#                            change_filter=util.ChangeFilter(branch='master'),
#                            treeStableTimer=None,
#                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["py2_v2_base"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

img_path = os.path.abspath('../singularity_images')
singularity_cmd = ['singularity','exec','-B','/mnt/build:/cvmfs',
                   util.Interpolate(img_path+'/%(prop:image)s.img')]

build_lock = util.MasterLock('build')

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='git://github.com/WIPACrepo/cvmfs.git',
        mode='full', method='clobber'))
factory.addStep(steps.ShellCommand(
    command=singularity_cmd+[
        'python','builders/build.py',
        '--src','~/cvmfs/icecube.opensciencegrid.org',
        '--dest','/cvmfs/icecube.opensciencegrid.org',
        '--variant',util.Property('buildername')
    ],
    locks=[build_lock.access('exclusive')],
))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="py2_v2_base",
      workernames=[name for name in worker_cfgs],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "CVMFS"
c['titleURL'] = "https://github.com/WIPACrepo/cvmfs"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
