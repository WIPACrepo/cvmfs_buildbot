{
    "apiVersion": "v1",
    "data": {
        "master.cfg": "from __future__ import print_function\n\nimport os\nimport json\nimport importlib\nimport pkgutil\n\nimport multiprocessing\n\nfrom buildbot.plugins import *\nfrom ldapauth import LDAPAuth\n\nimport master_cfg_d\n\n# This is the dictionary that the buildmaster pays attention to. We also use\n# a shorter alias to save typing.\nc = BuildmasterConfig = {}\n\n# 'protocols' contains information about protocols which master will use for\n# communicating with workers. You must define at least 'port' option that workers\n# could connect to your master with this protocol.\n# 'port' must match the value configured into the workers (with their\n# --master option)\nc['protocols'] = {'pb': {'port': 9989}}\n\n####### Locks\n\nlocks = {\n}\n\n####### Plugins\n\nplugins = {}\nfor i,mod,b in pkgutil.iter_modules(master_cfg_d.__path__):\n    if mod.startswith('_'):\n        continue\n    mod = mod.rsplit('.',1)[0]\n    x = importlib.import_module('master_cfg_d.'+mod,package='master_cfg_d')\n    print(mod,dir(x))\n    plugins[mod] = x\n\n\ntop = master_cfg_d.Config()\ntop.locks.update({\n    'cpu': util.MasterLock('cpu', maxCount=multiprocessing.cpu_count()-2),\n    'gpu': util.MasterLock('gpu', maxCount=1),\n})\nfor p in plugins.values():\n    if hasattr(p,'config') and p.config:\n        top.register_dependency(p.config)\ntop()\nfor x in ('workers','change_source','builders','schedulers'):\n    c[x] = top[x].values()\n\nfrom pprint import pprint\npprint(c)\n\ndef codebaseGenerator(chdict):\n    for key in top.codebases:\n        if top.codebases[key] == chdict['repository']:\n            return key\n    raise Exception('no codebase matching '+chdict['repository'])\n\n#c['codebaseGenerator'] = codebaseGenerator\n\n\n####### BUILDBOT SERVICES\n\n# 'services' is a list of BuildbotService items like reporter targets. The\n# status of each build will be pushed to these targets. buildbot/reporters/*.py\n# has a variety to choose from, like IRC bots.\n\nc['services'] = []\n\n####### PROJECT IDENTITY\n\n# the 'title' string will appear at the top of this buildbot installation's\n# home pages (linked to the 'titleURL').\n\nc['title'] = \"CVMFS Buildbot\"\nc['titleURL'] = \"https://github.com/WIPACrepo/cvmfs\"\n\n# the 'buildbotURL' string should point to the location where the buildbot's\n# internal web server is visible. This typically uses the port number set in\n# the 'www' entry below, but with an externally-visible host name which the\n# buildbot cannot figure out without some help.\n\nif 'BUILDBOT_MASTER_URL' in os.environ:\n    c['buildbotURL'] = os.environ['BUILDBOT_MASTER_URL']\nelse:\n    import socket\n    try:\n        host = socket.getfqdn()\n    except Exception:\n        host = 'localhost'\n    c['buildbotURL'] = 'http://'+host+':8010/'\n\n# minimalistic config to activate new web UI\nc['www'] = {\n    'port': 8010,\n    'plugins': {\n        'waterfall_view':{},\n        'console_view':{},\n    },\n    'authz': util.Authz(\n        allowRules=[\n            util.AnyControlEndpointMatcher(role=\"admins\"),\n        ],\n        roleMatchers=[\n            util.RolesFromGroups(groupPrefix=\"buildbot-\"),\n        ],\n    ),\n    'auth': LDAPAuth(\n        lserver='ldaps://ldap-1.icecube.wisc.edu',\n        bind='dc=icecube,dc=wisc,dc=edu', # base DN\n        group='simprod-submit', # admin group\n        admin_group='simulation', # view-only group\n    ),\n}\n\n####### DB URL\n\nif 'DB_USERNAME' in os.environ and 'DB_PASSWORD' in os.environ and 'DB_HOST' in os.environ:\n    db_user = os.environ['DB_USERNAME']\n    db_pass = os.environ['DB_PASSWORD']\n    db_host = os.environ['DB_HOST']\n    c['db'] = {\n        'db_url' : 'postgresql://'+db_user+':'+db_pass+'@'+db_host+'/'+db_user,\n    }\nelse:\n    c['db'] = {\n        # This specifies what database buildbot uses to store its state.  You can leave\n        # this at its default for all but the largest installations.\n        'db_url' : \"sqlite:///state.sqlite\",\n    }\n\n"
    },
    "kind": "ConfigMap",
    "metadata": {
        "name": "cvmfs-buildbot-master-cfg"
    }
}