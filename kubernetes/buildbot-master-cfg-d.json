{
    "apiVersion": "v1",
    "data": {
        "__init__.py": "from __future__ import print_function\n\nimport os\nimport platform\n\nfrom buildbot.plugins import *\n\n\ndef get_os():\n    d = platform.linux_distribution()\n    os = d[0].lower()\n    if os not in ('ubuntu','debian','centos'):\n        if 'red hat' in os:\n            os = 'centos'\n        else:\n            raise Exception('unknown os: '+os)\n    ver = d[1].lower().split('/')[-1]\n    if os == 'centos':\n        ver = ver.split('.')[0]\n    try:\n        float(ver)\n    except:\n        return os+'_'+ver\n    else:\n        return os+ver\n\n\nclass WriteOnceDict(dict):\n    def __setitem__(self, key, value):\n        if key in self:\n            raise KeyError('{} has already been set'.format(key))\n        super(WriteOnceDict, self).__setitem__(key, value)\n\nclass Config(dict):\n    \"\"\"\n    A Config object, holding the setup for a BuildBot config.\n\n    Provide a setup function\n    \"\"\"\n    def __init__(self, setup=None):\n        self['change_source'] = WriteOnceDict()\n        self['workers'] = WriteOnceDict()\n        self['builders'] = WriteOnceDict()\n        self['schedulers'] = WriteOnceDict()\n\n        self.locks = WriteOnceDict()\n        self.codebases = WriteOnceDict()\n\n        self.dependencies = []\n        self.setup = setup\n\n    def register_dependency(self, dep):\n        self.dependencies.append(dep)\n\n    def __call__(self):\n        name = self.setup.__module__.split('.')[-1] if self.setup else 'None'\n        print(name,'pre-dep locks:',self.locks)\n        for d in self.dependencies:\n            d.locks.update(self.locks)\n            d()\n            self.codebases.update(d.codebases)\n            for k in self:\n                self[k].update(d[k])\n        dep_sched = [self['schedulers'][s].name for s in self['schedulers'] if self['schedulers'][s].__class__.__name__ == 'Triggerable']\n        dep_builders = set(self['builders'])\n\n        if self.setup:\n            print(name,'pre-setup locks:',self.locks)\n            self.setup(self)\n\n        # for any new factory made by setup, add dependency trigger\n        if dep_sched:\n            for b in self['builders']:\n                if b not in dep_builders:\n                    self['builders'][b].factory.addStep(steps.Trigger(\n                        schedulerNames=dep_sched,\n                        waitForFinish=False,\n                        updateSourceStamp=False,\n                    ))\n",
        "cvmfs.py": "from __future__ import print_function\n\nimport os\nimport json\nimport random\n\nfrom buildbot.plugins import *\nfrom buildbot.process.buildstep import SUCCESS,SKIPPED\n\nfrom . import Config, get_os\n\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\nworker_cfgs = {\n    'cvmfs-centos6-build': 'worker-cvmfs-centos6-build',\n    'cvmfs-centos7-build': 'worker-cvmfs-centos7-build',\n    'cvmfs-ubuntu14-04-build': 'worker-cvmfs-ubuntu14-04-build',\n    'cvmfs-ubuntu15-10-build': 'worker-cvmfs-ubuntu15-10-build',\n    'cvmfs-ubuntu16-04-build': 'worker-cvmfs-ubuntu16-04-build',\n    'cvmfs-ubuntu18-04-build': 'worker-cvmfs-ubuntu18-04-build',\n}\n\ndef setup(cfg):\n\n    ####### WORKERS\n\n    for name in worker_cfgs:\n        cfg['workers'][name] = worker.Worker(\n            name, os.environ['WORKER_PASSWORD'],\n            max_builds=2,\n            properties={\n                'CPUS': '4',\n                'MEMORY': '8000',\n            },\n        )\n\n    ####### CHANGESOURCES\n\n    cfg['change_source']['cvmfs'] = changes.GitPoller(\n        'git://github.com/WIPACrepo/cvmfs.git',\n        workdir=prefix+'-cvmfs-gitpoller-workdir', branch='master',\n        category=prefix,\n        pollinterval=300,\n    )\n\n\n    ####### BUILDERS\n\n    \"\"\" for nightly\n    def isImportant(change):\n        try:\n            if not (os.path.exists(path) and os.listdir(path)):\n                return True # needs rebuilding\n            include = ['setup.cfg','setup.py','requirements.txt']\n            for f in change.files:\n                if f in include:\n                    return True\n            return False\n        except:\n            raise\n            return True\n\n    class SetupCVMFS(steps.BuildStep):\n        def run(self):\n            changes = util.Property('changes')\n            if isImportant(changes):\n                # create a ShellCommand for each stage and add them to the build\n                self.build.addStepsAfterCurrentStep([\n                ])\n                return SUCCESS\n            return SKIPPED\n    \"\"\"\n    \n    @util.renderer\n    def makeCommand(props):\n        command = [\n            'python', 'builders/build.py',\n            '--src', 'icecube.opensciencegrid.org',\n            '--dest', '/cvmfs/icecube.opensciencegrid.org',\n            '--variant', props.getProperty('variant'),\n        ]\n        if props.getProperty('svnonly'):\n            command.extend([\n                '--svnup', 'True',\n                '--svnonly', 'True',\n            ])\n        else:\n            command.extend([\n                '--svnup', 'False',\n            ])\n        if props.getProperty('nightly'):\n            command.append(['--nightly'])\n        return command\n    \n    @util.renderer\n    def makeCommandSpack(props):\n        command = [\n            'python', 'spack/build.py',\n            '--src', 'icecube.opensciencegrid.org',\n            '--dest', '/cvmfs/icecube.opensciencegrid.org',\n            props.getProperty('variant'),\n        ]\n        if props.getProperty('svnonly'):\n            command.extend([\n                '--svnonly',\n            ])\n        return command\n\n    build_factory = util.BuildFactory()\n    build_factory.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/cvmfs.git',\n        mode='full',\n        method='clobber',\n        workdir='build',\n    ))\n    build_factory.addStep(steps.ShellCommand(\n        name='build cvmfs',\n        command=makeCommand,\n        env={\n            'CPUS': util.Property('CPUS', default='1'),\n#            'MEMORY': util.Property('MEMORY', default='1'),\n        },\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n    \n\n    build_factory_spack = util.BuildFactory()\n    build_factory_spack.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/cvmfs.git',\n        mode='full',\n        method='clobber',\n        workdir='build',\n    ))\n    build_factory_spack.addStep(steps.ShellCommand(\n        name='build cvmfs',\n        command=makeCommandSpack,\n        env={\n            'CPUS': util.Property('CPUS', default='1'),\n#            'MEMORY': util.Property('MEMORY', default='1'),\n        },\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n\n    @util.renderer\n    def isMetaproject(props):\n        return 'meta' in props.getProperty('variant',default='')\n\n    svn_factory = util.BuildFactory()\n    svn_factory.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/cvmfs.git',\n        mode='full',\n        method='clobber',\n        workdir='build',\n    ))\n    svn_factory.addStep(steps.ShellCommand(\n        name='svn checkout',\n        command=makeCommand,\n        env={\n            'CPUS': util.Property('CPUS', default='1'),\n#            'MEMORY': util.Property('MEMORY', default='1'),\n        },\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive')\n        ],\n        doStepIf=isMetaproject,\n    ))\n    svn_factory.addStep(steps.Trigger(schedulerNames=[prefix+'-build'],\n        waitForFinish=True,\n        updateSourceStamp=True,\n        haltOnFailure=True,\n        set_properties={\n            'variant': util.Property('variant'),\n            'nightly': util.Property('nightly'),\n            'svnonly': False,\n        }\n    ))\n    @util.renderer\n    def translate_variant_to_path(props):\n        variant = str(props.getProperty('variant')).split('_')[:-1]\n        if len(variant) < 2:\n            return variant[0]\n        return variant[0]+'-'+'.'.join(variant[1:])\n    svn_factory.addStep(steps.Trigger(schedulerNames=['publish-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'variant': translate_variant_to_path,\n        }\n    ))\n    \n    spack_master = util.BuildFactory()\n    spack_master.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/cvmfs.git',\n        mode='full',\n        method='clobber',\n        workdir='build',\n    ))\n    spack_master.addStep(steps.ShellCommand(\n        name='svn checkout',\n        command=makeCommandSpack,\n        env={\n            'CPUS': util.Property('CPUS', default='1'),\n#            'MEMORY': util.Property('MEMORY', default='1'),\n        },\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive')\n        ],\n        doStepIf=isMetaproject,\n        timeout=3600*4, # 4 hours - some packages take a long time to build\n    ))\n    spack_master.addStep(steps.Trigger(schedulerNames=[prefix+'-build-spack'],\n        waitForFinish=True,\n        updateSourceStamp=True,\n        haltOnFailure=True,\n        set_properties={\n            'variant': util.Property('variant'),\n            'nightly': util.Property('nightly'),\n            'svnonly': False,\n        }\n    ))\n    @util.renderer\n    def translate_variant_to_path_spack(props):\n        variant = str(props.getProperty('variant')).replace('-metaproject','')\n        return variant\n    spack_master.addStep(steps.Trigger(schedulerNames=['publish-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'variant': translate_variant_to_path_spack,\n        }\n    ))\n\n    # ara\n    build_factory_ara = util.BuildFactory()\n    build_factory_ara.addStep(steps.Git(\n        repourl='git://github.com/ara-software/cvmfs.git',\n        mode='full',\n        method='clobber',\n        workdir='build',\n    ))\n    @util.renderer\n    def makeCommandARAmkdir(props):\n        path = '/cvmfs/ara.opensciencegrid.org/'+str(props.getProperty('variant'))+'/'+str(props.getProperty('os'))\n        command = 'rm -rf %s; mkdir -p %s'%(path, path)\n        return command\n    build_factory_ara.addStep(steps.ShellCommand(\n        name='mkdir',\n        command=makeCommandARAmkdir,\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive')\n        ],\n    ))\n    @util.renderer\n    def makeCommandARAcp(props):\n        command = [\n            'rsync','-ai','ara.opensciencegrid.org/'+str(props.getProperty('variant'))+'/',\n            '/cvmfs/ara.opensciencegrid.org/'+str(props.getProperty('variant'))+'/'+str(props.getProperty('os'))+'/',\n        ]\n        return command\n    build_factory_ara.addStep(steps.ShellCommand(\n        name='cp to cvmfs',\n        command=makeCommandARAcp,\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive')\n        ],\n    ))\n    @util.renderer\n    def makeCommandARAbuild(props):\n        command = [\n            'builders/'+str(props.getProperty('variant'))+'/build.sh',\n            '--dest', '/cvmfs/ara.opensciencegrid.org/'+str(props.getProperty('variant'))+'/'+str(props.getProperty('os')),\n            '--make_arg', '-j'+str(props.getProperty('CPUS', default='1')),\n        ]\n        return command\n    build_factory_ara.addStep(steps.ShellCommand(\n        name='build cvmfs',\n        command=makeCommandARAbuild,\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n    @util.renderer\n    def translate_variant_to_path_ara(props):\n        variant = str(props.getProperty('variant'))+'/'+str(props.getProperty('os'))\n        return variant\n    build_factory_ara.addStep(steps.Trigger(schedulerNames=['publish-ara-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'path': translate_variant_to_path_ara,\n        }\n    ))\n\n\n    builders = []\n    for name in worker_cfgs:\n        cfg['builders'][name+'_builder'] = util.BuilderConfig(\n            name=name+'_builder',\n            workername=name,\n            factory=build_factory,\n            properties={},\n        )\n        builders.append(name+'_builder')\n\n    builders_spack = []\n    for name in worker_cfgs:\n        if 'ubuntu14' in name or 'ubuntu15' in name or 'ubuntu16' in name:\n            continue\n        cfg['builders'][name+'_builder_spack'] = util.BuilderConfig(\n            name=name+'_builder_spack',\n            workername=name,\n            factory=build_factory_spack,\n            properties={},\n        )\n        builders_spack.append(name+'_builder_spack')\n        \n    builders_ara = []\n    cfg['builders']['cvmfs_builder_ara'] = util.BuilderConfig(\n        name='cvmfs_builder_ara',\n        workername='cvmfs-centos7-build',\n        factory=build_factory_ara,\n        properties={'os': 'centos7'},\n    )\n    builders_ara.append('cvmfs_builder_ara')\n\n    cfg['builders']['svn_builder'] = util.BuilderConfig(\n        name='svn_builder',\n        workername='cvmfs-ubuntu18-04-build',\n        factory=svn_factory,\n        properties={},\n    )\n\n    cfg['builders']['svn_builder_spack'] = util.BuilderConfig(\n        name='svn_builder_spack',\n        workername='cvmfs-ubuntu18-04-build',\n        factory=spack_master,\n        properties={},\n    )\n\n    ####### SCHEDULERS\n\n    variants = ['py2_v3.0.1_base','py2_v3.0.1_metaproject']\n    for v in variants:\n        cfg['schedulers'][prefix+'-'+v] = schedulers.SingleBranchScheduler(\n            name=prefix+'-'+v,\n            change_filter=util.ChangeFilter(category=prefix),\n            treeStableTimer=None,\n            builderNames=['svn_builder'],\n            properties={'variant':v, 'svnonly':True, 'nightly':False},\n        )\n    cfg['schedulers'][prefix+'-triggerable'] = schedulers.Triggerable(\n        name=prefix+\"-build\",\n        builderNames=builders,\n    )\n    cfg['schedulers'][prefix+'-triggerable-spack'] = schedulers.Triggerable(\n        name=prefix+\"-build-spack\",\n        builderNames=builders_spack,\n    )\n    cfg['schedulers'][prefix+'-force'] = schedulers.ForceScheduler(\n        name=prefix+\"-force\",\n        builderNames=['svn_builder'],\n        properties=[\n            util.StringParameter(name=\"variant\",\n                                 label=\"Variant:\",\n                                 default=\"\", size=80),\n            util.BooleanParameter(name=\"nightly\",\n                                  label=\"Nightly build\",\n                                  default=False),\n            util.FixedParameter(name=\"svnonly\", default=\"True\"),\n        ],\n    )\n    cfg['schedulers'][prefix+'-force-spack'] = schedulers.ForceScheduler(\n        name=prefix+\"-force-spack\",\n        builderNames=['svn_builder_spack'],\n        properties=[\n            util.StringParameter(name=\"variant\",\n                                 label=\"Variant:\",\n                                 default=\"\", size=80),\n            util.BooleanParameter(name=\"nightly\",\n                                  label=\"Nightly build\",\n                                  default=False),\n            util.FixedParameter(name=\"svnonly\", default=\"True\"),\n        ],\n    )\n    cfg['schedulers'][prefix+'-force-ara'] = schedulers.ForceScheduler(\n        name=prefix+\"-force-ara\",\n        builderNames=['cvmfs_builder_ara'],\n        properties=[\n            util.StringParameter(name=\"variant\",\n                                 label=\"Version:\",\n                                 default=\"trunk\", size=80),\n        ],\n    )\n\n    cfg['schedulers'][prefix+'-nightly'] = schedulers.Nightly(\n        name=prefix+'-nightly',\n        builderNames=['svn_builder'],\n        properties={'variant':'py2_v3_1_1_metaproject', 'svnonly': True, 'nightly':True},\n        hour=0, minute=0,\n    )\n\n    cfg['schedulers'][prefix+'-nightly-spack'] = schedulers.Nightly(\n        name=prefix+'-nightly-spack',\n        builderNames=['svn_builder_spack'],\n        properties={'variant':'py3-v4.1.1-metaproject', 'svnonly': True, 'nightly':True},\n        hour=3, minute=0,\n    )\n\nconfig = Config(setup)\nconfig.locks['cvmfs_shared'] = util.MasterLock('cvmfs_lock', maxCount=100)\n",
        "data.py": "from __future__ import print_function\n\nimport os\nimport json\nimport random\n\nfrom buildbot.plugins import *\nfrom buildbot.process.buildstep import SUCCESS,SKIPPED\n\nfrom . import Config, get_os\n\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\n\ndef setup(cfg):\n\n    ####### WORKERS\n\n    ####### CHANGESOURCES\n\n    ####### BUILDERS\n\n    # GCD sync\n    build_factory = util.BuildFactory()\n    build_factory.addStep(steps.ShellCommand(\n        name='copy GCD',\n        command=['wget','-nd','-nc','-r','-l','1','-A','Geo*','http://prod-exe.icecube.wisc.edu/GCD/'],\n        workdir='/cvmfs/icecube.opensciencegrid.org/data/GCD',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n    build_factory.addStep(steps.Trigger(schedulerNames=['publish-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'variant': 'data/GCD',\n        }\n    ))\n\n    cfg['builders']['gcd_builder'] = util.BuilderConfig(\n        name='gcd_builder',\n        workername='cvmfs-centos7-build',\n        factory=build_factory,\n        properties={},\n    )\n\n    # test-data sync\n    build_factory = util.BuildFactory()\n    build_factory.addStep(steps.ShellCommand(\n        name='copy test-data',\n        command=['rsync','-vrlpt','--delete','code.icecube.wisc.edu::Offline/test-data/releases/V00-00-01/','/cvmfs/icecube.opensciencegrid.org/data/i3-test-data/'],\n        workdir='/cvmfs/icecube.opensciencegrid.org/data',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n    build_factory.addStep(steps.Trigger(schedulerNames=['publish-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'variant': 'data/i3-test-data',\n        }\n    ))\n\n    cfg['builders']['test_data_builder'] = util.BuilderConfig(\n        name='test_data_builder',\n        workername='cvmfs-centos7-build',\n        factory=build_factory,\n        properties={},\n    )\n\n    # new test-data sync\n    build_factory = util.BuildFactory()\n    build_factory.addStep(steps.ShellCommand(\n        name='copy test-data',\n        command=['rsync','-vrlpt','--delete','code.icecube.wisc.edu::Offline/test-data/','/cvmfs/icecube.opensciencegrid.org/data/i3-test-data-svn/'],\n        workdir='/cvmfs/icecube.opensciencegrid.org/data',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n    build_factory.addStep(steps.Trigger(schedulerNames=['publish-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'variant': 'data/i3-test-data-svn',\n        }\n    ))\n\n    cfg['builders']['test_data_svn_builder'] = util.BuilderConfig(\n        name='test_data_svn_builder',\n        workername='cvmfs-centos7-build',\n        factory=build_factory,\n        properties={},\n    )\n    \n\n    # L3 LE retro tables sync\n    build_factory = util.BuildFactory()\n    build_factory.addStep(steps.ShellCommand(\n        name='copy tables',\n        command=['wget','-nH','--cut-dirs','6','-P','retro','-np','-nc','-r','-l','4','-A','*.npy','https://icecube:skua@convey.icecube.wisc.edu/data/ana/reconstruction/2019/retro/tables/'],\n        workdir='/cvmfs/icecube.opensciencegrid.org/data/photon-tables/',\n        haltOnFailure=True,\n        locks=[\n            cfg.locks['cvmfs_shared'].access('counting')\n        ],\n    ))\n    build_factory.addStep(steps.Trigger(schedulerNames=['publish-trigger'],\n        waitForFinish=True,\n        set_properties={\n            'variant': 'data/photon-tables',\n        }\n    ))\n\n    cfg['builders']['le_retro_tables'] = util.BuilderConfig(\n        name='le_retro_tables',\n        workername='cvmfs-centos7-build',\n        factory=build_factory,\n        properties={},\n    )\n\n\n    ####### SCHEDULERS\n    cfg['schedulers'][prefix+'-gcd-force'] = schedulers.ForceScheduler(\n        name=prefix+\"-gcd-force\",\n        builderNames=['gcd_builder'],\n        properties=[],\n    )\n    cfg['schedulers'][prefix+'-gcd-nightly'] = schedulers.Nightly(\n        name=prefix+\"-gcd-nightly\",\n        builderNames=['gcd_builder'],\n        properties={},\n        hour=2, minute=45,\n    )\n    cfg['schedulers'][prefix+'-test-data-force'] = schedulers.ForceScheduler(\n        name=prefix+\"-test-data-force\",\n        builderNames=['test_data_builder'],\n        properties=[],\n    )\n    cfg['schedulers'][prefix+'-test-data-svn-force'] = schedulers.ForceScheduler(\n        name=prefix+\"-test-data-svn-force\",\n        builderNames=['test_data_svn_builder'],\n        properties=[],\n    )\n    cfg['schedulers'][prefix+'-test-data-svn-nightly'] = schedulers.Nightly(\n        name=prefix+\"-test-data-svn-nightly\",\n        builderNames=['test_data_svn_builder'],\n        properties={},\n        hour=2, minute=0,\n    )\n    cfg['schedulers'][prefix+'-le_retro_tables-force'] = schedulers.ForceScheduler(\n        name=prefix+\"-le_retro_tables-force\",\n        builderNames=['le_retro_tables'],\n        properties=[],\n    )\n    cfg['schedulers'][prefix+'-le_retro_tables-nightly'] = schedulers.Nightly(\n        name=prefix+\"-le_retro_tables-nightly\",\n        builderNames=['le_retro_tables'],\n        properties={},\n        hour=2, minute=30,\n    )\n\nconfig = Config(setup)\nconfig.locks['cvmfs_shared'] = util.MasterLock('cvmfs_lock', maxCount=100)\n",
        "stratum0.py": "from __future__ import print_function\n\nimport os\nimport json\n\nfrom buildbot.plugins import *\nfrom buildbot.process.buildstep import SUCCESS,SKIPPED,FAILURE\n\nfrom . import Config, get_os\n\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\n\ndef setup(cfg):\n\n    ####### WORKERS\n\n    workername = 'cvmfs-centos7-stratum0'\n    cfg['workers'][prefix] = worker.Worker(\n        workername, os.environ['WORKER_PASSWORD'],\n        max_builds=1,\n        properties={},\n    )\n\n    ####### CHANGESOURCES\n\n    cfg['change_source']['cvmfs'] = changes.GitPoller(\n        'git://github.com/WIPACrepo/cvmfs.git',\n        workdir=prefix+'-cvmfs-gitpoller-workdir', branch='master',\n        category=prefix,\n        pollinterval=300,\n    )\n\n\n    ####### BUILDERS\n\n    \"\"\" for nightly\n    def isImportant(change):\n        try:\n            if not (os.path.exists(path) and os.listdir(path)):\n                return True # needs rebuilding\n            include = ['setup.cfg','setup.py','requirements.txt']\n            for f in change.files:\n                if f in include:\n                    return True\n            return False\n        except:\n            raise\n            return True\n\n    class SetupCVMFS(steps.BuildStep):\n        def run(self):\n            changes = util.Property('changes')\n            if isImportant(changes):\n                # create a ShellCommand for each stage and add them to the build\n                self.build.addStepsAfterCurrentStep([\n                ])\n                return SUCCESS\n            return SKIPPED\n    \"\"\"\n\n    def BuildFailed(step):\n        return step.build.results == FAILURE\n    def BuildPassed(step):\n        return step.build.results == SUCCESS\n\n    factory = util.BuildFactory()\n    factory.addStep(steps.ShellCommand(\n        name='open transaction',\n        command=['cvmfs_server','transaction','icecube.opensciencegrid.org'],\n        haltOnFailure=True,\n    ))\n    @util.renderer\n    def makeCommandRsync(props):\n        src_path = os.path.join('icecube.opensciencegrid.org',\n                                str(props.getProperty('variant')))\n        dest_path = os.path.dirname(src_path)\n        command = [\n            'cvmfs_rsync','-ai','--delete',\n            os.path.join('/cvmfs-source',src_path),\n            os.path.join('/cvmfs',dest_path)+'/',\n        ]\n        return command\n    factory.addStep(steps.ShellCommand(\n        name='rsync',\n        command=makeCommandRsync,\n        timeout=7200, # 2 hours\n        haltOnFailure=True,\n        doStepIf=BuildPassed,\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='publish transaction',\n        command=['cvmfs_server','publish','icecube.opensciencegrid.org'],\n        timeout=7200, # 2 hours\n        haltOnFailure=True,\n        doStepIf=BuildPassed,\n        hideStepIf=lambda results, s: results==SKIPPED,\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='abort transaction',\n        command=['cvmfs_server','abort','-f','icecube.opensciencegrid.org'],\n        alwaysRun=True,\n        haltOnFailure=True,\n        doStepIf=BuildFailed,\n        hideStepIf=lambda results, s: results==SKIPPED,\n    ))\n\n    cfg['builders'][prefix+'_builder'] = util.BuilderConfig(\n        name=prefix+'_builder',\n        workername=workername,\n        factory=factory,\n        properties={},\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive'),\n            cfg.locks['cvmfs_publish'].access('exclusive')\n        ],\n        collapseRequests=True,\n    )\n    \n    # ARA publish\n    factory = util.BuildFactory()\n    factory.addStep(steps.ShellCommand(\n        name='open transaction',\n        command=['cvmfs_server','transaction','ara.opensciencegrid.org'],\n        haltOnFailure=True,\n    ))\n    @util.renderer\n    def makeCommandRsyncARA(props):\n        src_path = os.path.join('ara.opensciencegrid.org',\n                                str(props.getProperty('path')))\n        dest_path = os.path.dirname(src_path)\n        command = [\n            'cvmfs_rsync','-ai','--delete',\n            os.path.join('/cvmfs-source',src_path),\n            os.path.join('/cvmfs',dest_path)+'/',\n        ]\n        return command\n    factory.addStep(steps.ShellCommand(\n        name='rsync',\n        command=makeCommandRsyncARA,\n        timeout=7200, # 2 hours\n        haltOnFailure=True,\n        doStepIf=BuildPassed,\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='publish transaction',\n        command=['cvmfs_server','publish','ara.opensciencegrid.org'],\n        timeout=7200, # 2 hours\n        haltOnFailure=True,\n        doStepIf=BuildPassed,\n        hideStepIf=lambda results, s: results==SKIPPED,\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='abort transaction',\n        command=['cvmfs_server','abort','-f','ara.opensciencegrid.org'],\n        alwaysRun=True,\n        haltOnFailure=True,\n        doStepIf=BuildFailed,\n        hideStepIf=lambda results, s: results==SKIPPED,\n    ))\n\n    cfg['builders'][prefix+'_ara_builder'] = util.BuilderConfig(\n        name=prefix+'_ara_builder',\n        workername=workername,\n        factory=factory,\n        properties={},\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive'),\n            cfg.locks['cvmfs_publish'].access('exclusive')\n        ],\n        collapseRequests=True,\n    )\n\n    # download whitelists\n    factory_whitelist = util.BuildFactory()\n    factory_whitelist.addStep(steps.ShellCommand(\n        name='resign IceCube whitelist',\n        command='cd /srv/cvmfs/icecube.opensciencegrid.org && rm -f .cvmfswhitelist.new && wget -qO .cvmfswhitelist.new http://oasis.opensciencegrid.org/cvmfs/icecube.opensciencegrid.org/.cvmfswhitelist && mv -f .cvmfswhitelist.new .cvmfswhitelist',\n        haltOnFailure=True,\n    ))\n    factory_whitelist.addStep(steps.ShellCommand(\n        name='resign ARA whitelist',\n        command='cd /srv/cvmfs/ara.opensciencegrid.org && rm -f .cvmfswhitelist.new && wget -qO .cvmfswhitelist.new http://oasis.opensciencegrid.org/cvmfs/ara.opensciencegrid.org/.cvmfswhitelist && mv -f .cvmfswhitelist.new .cvmfswhitelist',\n        haltOnFailure=True,\n    ))\n\n    cfg['builders'][prefix+'_whitelist'] = util.BuilderConfig(\n        name=prefix+'_whitelist',\n        workername=workername,\n        factory=factory_whitelist,\n        properties={},\n        locks=[\n            cfg.locks['cvmfs_publish'].access('exclusive')\n        ],\n        collapseRequests=True,\n    )\n\n    # user cvmfs\n    factory_user_rsync = util.BuildFactory()\n    factory_user_rsync.addStep(steps.ShellCommand(\n        name='open transaction',\n        command=['cvmfs_server','transaction','icecube.opensciencegrid.org'],\n        haltOnFailure=True,\n    ))\n    factory_user_rsync.addStep(steps.ShellCommand(\n        name='rsync',\n        command=[\n            'cvmfs_rsync','-ai','--delete',\n            'rsync://nfs-6.icecube.wisc.edu/pcvmfs/',\n            '/cvmfs/icecube.opensciencegrid.org/users/',\n        ],\n        timeout=7200, # 2 hours\n        haltOnFailure=True,\n        doStepIf=BuildPassed,\n    ))\n    factory_user_rsync.addStep(steps.ShellCommand(\n        name='publish transaction',\n        command=['cvmfs_server','publish','icecube.opensciencegrid.org'],\n        timeout=7200, # 2 hours\n        haltOnFailure=True,\n        doStepIf=BuildPassed,\n        hideStepIf=lambda results, s: results==SKIPPED,\n    ))\n    factory_user_rsync.addStep(steps.ShellCommand(\n        name='abort transaction',\n        command=['cvmfs_server','abort','-f','icecube.opensciencegrid.org'],\n        alwaysRun=True,\n        haltOnFailure=True,\n        doStepIf=BuildFailed,\n        hideStepIf=lambda results, s: results==SKIPPED,\n    ))\n\n    cfg['builders'][prefix+'_user_rsync'] = util.BuilderConfig(\n        name=prefix+'_user_rsync',\n        workername=workername,\n        factory=factory_user_rsync,\n        properties={},\n        locks=[\n            cfg.locks['cvmfs_publish'].access('exclusive')\n        ],\n        collapseRequests=True,\n    )\n\n    # backup of IceCube\n    factory_backup = util.BuildFactory()\n    factory_backup.addStep(steps.ShellCommand(\n        name='rsync',\n        command=['rsync','-ai','--delete','/cvmfs-source/icecube.opensciencegrid.org','rsync://nfs-5.icecube.wisc.edu/cvmfs/'],\n        timeout=14400, # 4 hours\n        haltOnFailure=True,\n    ))\n\n    cfg['builders'][prefix+'_backup'] = util.BuilderConfig(\n        name=prefix+'_backup',\n        workername=workername,\n        factory=factory_backup,\n        properties={},\n        locks=[\n            cfg.locks['cvmfs_shared'].access('exclusive')\n        ],\n        collapseRequests=True,\n    )\n\n    ####### SCHEDULERS\n\n    cfg['schedulers']['publish-force'] = schedulers.ForceScheduler(\n        name=\"publish-force\",\n        builderNames=[prefix+'_builder'],\n        properties=[\n            util.StringParameter(name=\"variant\",\n                                 label=\"Variant:\",\n                                 default=\"\", size=80),\n        ],\n    )\n    cfg['schedulers']['publish-trigger'] = schedulers.Triggerable(\n        name=\"publish-trigger\",\n        builderNames=[prefix+'_builder'],\n    )\n    cfg['schedulers']['publish-ara-force'] = schedulers.ForceScheduler(\n        name=\"publish-ara-force\",\n        builderNames=[prefix+'_ara_builder'],\n        properties=[\n            util.StringParameter(name=\"path\",\n                                 label=\"Path:\",\n                                 default=\"\", size=80),\n        ],\n    )\n    cfg['schedulers']['publish-ara-trigger'] = schedulers.Triggerable(\n        name=\"publish-ara-trigger\",\n        builderNames=[prefix+'_ara_builder'],\n    )\n\n    # update the whitelist every day at 3am\n    cfg['schedulers'][prefix+'-whitelist'] = schedulers.Nightly(\n        name=\"whitelist\",\n        builderNames=[prefix+'_whitelist'],\n        hour=3, minute=0,\n    )\n\n    # update the user cvmfs space every hour on the hour\n    cfg['schedulers'][prefix+'-user_rsync'] = schedulers.Nightly(\n        name=\"user cvmfs\",\n        builderNames=[prefix+'_user_rsync'],\n        minute=0,\n    )\n\n    # backup cvmfs the first day of every month, at 4am\n    cfg['schedulers'][prefix+'-backup'] = schedulers.Nightly(\n        name=\"backup\",\n        builderNames=[prefix+'_backup'],\n        dayOfMonth=1, hour=4, minute=0,\n    )\n\n\nconfig = Config(setup)\nconfig.locks['cvmfs_shared'] = util.MasterLock('cvmfs_lock', maxCount=100)\nconfig.locks['cvmfs_publish'] = util.MasterLock('cvmfs_publish', maxCount=1)\n"
    },
    "kind": "ConfigMap",
    "metadata": {
        "name": "cvmfs-buildbot-master-cfg-d"
    }
}